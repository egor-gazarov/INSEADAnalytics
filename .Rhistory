swirl()
library("swirl", lib.loc="~/R/win-library/3.3")
swirl()
5+7
x <- 5 + 7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z *2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c (0, 10)
c(1,2,3,4) + c(0,10,100)
z *2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files("testdir")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path('folder1','folder2')
?dir.create
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"),recursive = true)
dir.create(file.path("testdir2","testdir3"),recursive = TRUE)
setwd(Old.dir)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:lenght(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0, 1, 2), times=10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c('My','name','is')
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Egor")
my_name
paste(my_name, collapse = " ")
past('Hello','world!',sep = " ")
paste('Hello','world!',sep = " ")
paste(1:3,c('x','y','z'), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(letters,1:4,sep = '-')
paste(LETTERS, 1:4, sep = "-")
# Required R libraries (need to be installed - it can take a few minutes the first time you run the project)
# installs all necessary libraries from CRAN
get_libraries <- function(filenames_list) {
lapply(filenames_list,function(thelibrary){
if (do.call(require,list(thelibrary)) == FALSE)
do.call(install.packages,list(thelibrary))
do.call(library,list(thelibrary))
})
}
libraries_used=c("devtools","shiny","knitr","graphics","grDevices","xtable")
get_libraries(libraries_used)
if (require(slidifyLibraries) == FALSE)
install_github("slidifyLibraries", "ramnathv")
if (require(slidify) == FALSE)
install_github("slidify", "ramnathv")
source("AnalyticsLibraries/library.R")
source("https://github.com/InseadDataAnalytics/INSEADAnalytics/blob/master/update_fork.R")
#getwd()
getwd()
source("https://github.com/InseadDataAnalytics/INSEADAnalytics/blob/master/update_fork.R")
getwd()
setwd("Exercises/Exerciseset1/")
list.files()
source("helpersSet1.R")
source("dataSet1.R")
warnings()
GroupProjectData <- read.csv("data/Boats.csv", sep=";")
View(GroupProjectData)
GroupProjectData <- read.csv("data/Boats.csv", sep=";")
hist(GroupProjectData[,2])
hist(GroupProjectData[,1])
hist(GroupProjectData[,2])
getwd()
hist(GroupProjectData[,2])
cor(GroupProjectData[,c(4,5)])
read.delim("http://fimi.ua.ac.be/data/retail.dat")
retail <- read.delim("http://fimi.ua.ac.be/data/retail.dat")
View(retail)
View(retail)
View(retail)
View(retail)
# Sync a forked copy of INSEADAnalytics with the master project. For details,
# see https://github.com/InseadDataAnalytics/INSEADAnalytics/issues/7
if (!require(git2r)) {
install.packages("git2r", repos="http://cran.r-project.org/", quiet=TRUE)
library(git2r)
}
repo <- repository(".")
if (!("upstream" %in% remotes(repo))) {
remote_add(repo, "upstream", "https://github.com/InseadDataAnalytics/INSEADAnalytics")
}
fetch(repo, "upstream")
checkout(repo, "master")
merge(repo, "upstream/master")
message("
Your local copy of INSEADAnalytics is now in sync with the master project.
You can update your remote copy by clicking 'Push' in the 'Git' panel or
by executing the following:
push(repo, credentials=cred_user_pass(readline('Github username: '), readline('Github password: ')))
")
# push(repo, credentials=cred_user_pass(readline("Github username: "), readline("Github password: ")))
getwd()
setwd("C:/Users/egaza/OneDrive/OneDrive - INSEAD/P3/Data Analytics/R files/INSEADAnalytics/Exercises")
setwd("C:/Users/egaza/OneDrive/OneDrive - INSEAD/P3/Data Analytics/R files/INSEADAnalytics/Exercises/Exerciseset2")
getwd()
source("helpersSet2.R")
library(googleVis)
load("data/FuturesTrendFollowingData.Rdata")
head(rownames(futures_data),1)
show_data = data.frame(colnames(futures_data))
m1<-gvisTable(show_data,options=list(showRowNumber=TRUE,width=1920, height=min(400,27*(nrow(show_data)+1)),allowHTML=TRUE,page='disable'))
print(m1,'chart')
getwd()
setwd("C:/Users/egaza/OneDrive/OneDrive - INSEAD/P3/Data Analytics/R files/INSEADAnalytics")
source("update_fork.R")
setwd("C:/Users/egaza/OneDrive/OneDrive - INSEAD/P3/Data Analytics/R files/INSEADAnalytics/CourseSessions/Sessions23")
setwd("C:/Users/egaza/OneDrive/OneDrive - INSEAD/P3/Data Analytics/R files/INSEADAnalytics/CourseSessions/InClassProcess")
View(show_data)
setwd("C:/Users/egaza/OneDrive/OneDrive - INSEAD/P3/Data Analytics/R files/INSEADAnalytics/CourseSessions/InClassProcess")
source('C:/Users/egaza/OneDrive/OneDrive - INSEAD/P3/Data Analytics/R files/INSEADAnalytics/update_fork.R')
setwd("C:/Users/egaza/OneDrive/OneDrive - INSEAD/P3/Data Analytics/R files/INSEADAnalytics")
source('C:/Users/egaza/OneDrive/OneDrive - INSEAD/P3/Data Analytics/R files/INSEADAnalytics/update_fork.R')
setwd("C:/Users/egaza/OneDrive/OneDrive - INSEAD/P3/Data Analytics/R files/INSEADAnalytics")
source('C:/Users/egaza/OneDrive/OneDrive - INSEAD/P3/Data Analytics/R files/INSEADAnalytics/update_fork.R')
?fetch
??fetch
# SET UP
# type in the Console below help(getwd) and help(setwd) for more information, to make sure you are in the right directory
local_directory <- "."
suppressWarnings(source(paste(local_directory,"../../AnalyticsLibraries/library.R", sep="/")))
# Package options
suppressWarnings(ggthemr('fresh'))  # ggplot theme
opts_knit$set(progress=FALSE, verbose=FALSE)
opts_chunk$set(echo=FALSE, fig.align="center", fig.width=10, fig.height=6.35, results="asis")
options(knitr.kable.NA = '')
# Determine document output format, return "html" by default
getDocumentOutputFormat <- function() {
format <- opts_knit$get('rmarkdown.pandoc.to')
if (!is.null(format)) format else "html"
}
# Format tables for html/latex output
normalize.abs <- function(x, min=0, max=1, na.rm=FALSE) normalize(abs(x), min, max, na.rm)
iprint.df <- function(df, scale=FALSE) {
if (getDocumentOutputFormat() == "html") {
if (class(df) != "data.frame")
df <- as.data.frame(df)
x <- lapply(colnames(df), function(col) {
if (is.numeric(df[, col]))
color_bar(rgb(238, 238, 238, max=255), normalize.abs, min=0.1, na.rm=TRUE)
else
formatter("span")
})
names(x) <- colnames(df)
tags$div(class="formattable_container", HTML(gsub("NA", "", format_table(df, x))))
} else if (opts_knit$get('rmarkdown.pandoc.to') == "latex") {
cat(ifelse(scale, "\\setkeys{Gin}{height=\\textheight}\\adjustbox{width=\\linewidth}{", "\\begin{center}"))
cat(kable(df, format="latex", booktabs=TRUE, longtable=!scale))
cat(ifelse(scale, "}\\setkeys{Gin}{height=\\maxheight}", "\\end{center}"))
} else {
kable(df)
}
}
# Format plots for html/latex output
iplot.df <- function(df, x=colnames(df)[1], y="value", v="variable", type="line", xlab=NULL, ylab=NULL) {
if (getDocumentOutputFormat() == "html") {
p <- c3(df, x=x, y=y, group=v, width="100%", height="480px")
p <- switch(type,
line = p %>% c3_line('spline'),
bar  = p %>% c3_bar(bar_width=0.90)
)
if (!is.null(xlab)) p <- p %>% xAxis(label=xlab)
if (!is.null(ylab)) p <- p %>% yAxis(label=ylab)
p
} else {  # latex, etc.
p <- ggplot(df, aes_string(x=x, y=y, colour=v))
p <- switch(type,
line = p + geom_line(),
bar  = p + geom_bar(stat="identity")
)
if (!is.null(xlab)) p <- p + labs(x=xlab)
if (!is.null(ylab)) p <- p + labs(y=ylab)
p
}
}
iplot.hist <- function(x, breaks="Sturges", xlab=NULL) {
h <- hist(x, breaks=breaks, plot=FALSE)
df <- data.frame(x=head(h$breaks, -1), Frequency=h$counts)
iplot.df(df, x="x", y="Frequency", v=NULL, type="bar", xlab=xlab)
}
iplot.grid <- if (getDocumentOutputFormat() == "html") tags$div else grid.arrange
iplot.dendrogram <- function(cluster) {
labels <- (length(cluster$labels) > 40)
if (getDocumentOutputFormat() == "html") {
cluster$labels <- if (!labels) NULL else cluster$labels
margins <- list(top=10, right=0, bottom=ifelse(labels, 120, 10), left=0)
dendroNetwork(cluster, width="100%", height="480px", fontSize=14,
treeOrientation="vertical", margins=margins, textRotate=90)
} else {  # latex, etc.
ggdendrogram(Hierarchical_Cluster, theme_dendro=FALSE, labels=labels) +
xlab("Observations") + ylab("Height")
}
}
# Please ENTER the name of the file with the data used. The file should be a .csv with one row per observation (e.g. person) and one column per attribute. Do not add .csv at the end, make sure the data are numeric.
datafile_name = "../Sessions23/data/Boats.csv"
# Please enter the minimum number below which you would like not to print - this makes the readability of the tables easier. Default values are either 10e6 (to print everything) or 0.5. Try both to see the difference.
MIN_VALUE = 0.5
# Please enter the maximum number of observations to show in the report and slides.
# DEFAULT is 10. If the number is large the report may be slow.
max_data_report = 10
ProjectData <- read.csv(datafile_name)
ProjectData <- data.matrix(ProjectData)
ProjectData_INITIAL <- ProjectData
ProjectData <- read.csv("C:\Users\egaza\OneDrive\OneDrive - INSEAD\P3\Data Analytics\R files\INSEADAnalytics\CourseSessions\Sessions23\data\Boats.csv)
ProjectData <- read.csv("\CourseSessions\Sessions23\data\Boats.csv)
setwd("C:/Users/egaza/OneDrive/OneDrive - INSEAD/P3/Data Analytics/R files/INSEADAnalytics/CourseSessions/Sessions23")
ProjectData <- read.csv("data/Boats.csv)
ProjectData <- data.matrix(ProjectData)
ProjectData_INITIAL <- ProjectData
ProjectData <- read.csv("data/Boats.csv")
ProjectData <- read.csv("data\Boats.csv")
ProjectData <- read.csv("/data/Boats.csv")
ProjectData <- read.csv("Boats.csv")
setwd("C:/Users/egaza/OneDrive/OneDrive - INSEAD/P3/Data Analytics/R files/INSEADAnalytics/CourseSessions/Sessions23/data")
ProjectData <- read.csv("Boats.csv")
#getwd()
#setwd("Exercises/Exerciseset2/")
#list.files()
# Here is how the `principal` function is used
UnRotated_Results<-principal(ProjectDataFactor, nfactors=ncol(ProjectDataFactor), rotate="none",score=TRUE)
# SET UP
# type in the Console below help(getwd) and help(setwd) for more information, to make sure you are in the right directory
local_directory <- "."
suppressWarnings(source(paste(local_directory,"../../AnalyticsLibraries/library.R", sep="/")))
# Package options
suppressWarnings(ggthemr('fresh'))  # ggplot theme
opts_knit$set(progress=FALSE, verbose=FALSE)
opts_chunk$set(echo=FALSE, fig.align="center", fig.width=10, fig.height=6.35, results="asis")
options(knitr.kable.NA = '')
# Determine document output format, return "html" by default
getDocumentOutputFormat <- function() {
format <- opts_knit$get('rmarkdown.pandoc.to')
if (!is.null(format)) format else "html"
}
# Format tables for html/latex output
normalize.abs <- function(x, min=0, max=1, na.rm=FALSE) normalize(abs(x), min, max, na.rm)
iprint.df <- function(df, scale=FALSE) {
if (getDocumentOutputFormat() == "html") {
if (class(df) != "data.frame")
df <- as.data.frame(df)
x <- lapply(colnames(df), function(col) {
if (is.numeric(df[, col]))
color_bar(rgb(238, 238, 238, max=255), normalize.abs, min=0.1, na.rm=TRUE)
else
formatter("span")
})
names(x) <- colnames(df)
tags$div(class="formattable_container", HTML(gsub("NA", "", format_table(df, x))))
} else if (opts_knit$get('rmarkdown.pandoc.to') == "latex") {
cat(ifelse(scale, "\\setkeys{Gin}{height=\\textheight}\\adjustbox{width=\\linewidth}{", "\\begin{center}"))
cat(kable(df, format="latex", booktabs=TRUE, longtable=!scale))
cat(ifelse(scale, "}\\setkeys{Gin}{height=\\maxheight}", "\\end{center}"))
} else {
kable(df)
}
}
# Format plots for html/latex output
iplot.df <- function(df, x=colnames(df)[1], y="value", v="variable", type="line", xlab=NULL, ylab=NULL) {
if (getDocumentOutputFormat() == "html") {
p <- c3(df, x=x, y=y, group=v, width="100%", height="480px")
p <- switch(type,
line = p %>% c3_line('spline'),
bar  = p %>% c3_bar(bar_width=0.90)
)
if (!is.null(xlab)) p <- p %>% xAxis(label=xlab)
if (!is.null(ylab)) p <- p %>% yAxis(label=ylab)
p
} else {  # latex, etc.
p <- ggplot(df, aes_string(x=x, y=y, colour=v))
p <- switch(type,
line = p + geom_line(),
bar  = p + geom_bar(stat="identity")
)
if (!is.null(xlab)) p <- p + labs(x=xlab)
if (!is.null(ylab)) p <- p + labs(y=ylab)
p
}
}
iplot.hist <- function(x, breaks="Sturges", xlab=NULL) {
h <- hist(x, breaks=breaks, plot=FALSE)
df <- data.frame(x=head(h$breaks, -1), Frequency=h$counts)
iplot.df(df, x="x", y="Frequency", v=NULL, type="bar", xlab=xlab)
}
iplot.grid <- if (getDocumentOutputFormat() == "html") tags$div else grid.arrange
iplot.dendrogram <- function(cluster) {
labels <- (length(cluster$labels) > 40)
if (getDocumentOutputFormat() == "html") {
cluster$labels <- if (!labels) NULL else cluster$labels
margins <- list(top=10, right=0, bottom=ifelse(labels, 120, 10), left=0)
dendroNetwork(cluster, width="100%", height="480px", fontSize=14,
treeOrientation="vertical", margins=margins, textRotate=90)
} else {  # latex, etc.
ggdendrogram(Hierarchical_Cluster, theme_dendro=FALSE, labels=labels) +
xlab("Observations") + ylab("Height")
}
}
# Please ENTER the name of the file with the data used. The file should be a .csv with one row per observation (e.g. person) and one column per attribute. Do not add .csv at the end, make sure the data are numeric.
datafile_name = "../Sessions23/data/Boats.csv"
# Please enter the minimum number below which you would like not to print - this makes the readability of the tables easier. Default values are either 10e6 (to print everything) or 0.5. Try both to see the difference.
MIN_VALUE = 0.5
# Please enter the maximum number of observations to show in the report and slides.
# DEFAULT is 10. If the number is large the report may be slow.
max_data_report = 10
ProjectData <- read.csv(datafile_name)
ProjectData <- data.matrix(ProjectData)
ProjectData_INITIAL <- ProjectData
# Please ENTER then original raw attributes to use.
# Please use numbers, not column names, e.g. c(1:5, 7, 8) uses columns 1,2,3,4,5,7,8
factor_attributes_used = c(2:30)
# Please ENTER the selection criterions for the factors to use.
# Choices: "eigenvalue", "variance", "manual"
factor_selectionciterion = "manual"
# Please ENTER the desired minumum variance explained
# (Only used in case "variance" is the factor selection criterion used).
minimum_variance_explained = 65  # between 1 and 100
# Please ENTER the number of factors to use
# (Only used in case "manual" is the factor selection criterion used).
manual_numb_factors_used = 15
# Please ENTER the rotation eventually used (e.g. "none", "varimax", "quatimax", "promax", "oblimin", "simplimax", and "cluster" - see help(principal)). Default is "varimax"
rotation_used = "varimax"
factor_attributes_used <- intersect(factor_attributes_used, 1:ncol(ProjectData))
ProjectDataFactor <- ProjectData[,factor_attributes_used]
ProjectDataFactor <- ProjectData <- data.matrix(ProjectDataFactor)
rownames(ProjectDataFactor) <- paste0("Obs.", sprintf("%02i", 1:nrow(ProjectDataFactor)))
iprint.df(t(head(round(ProjectDataFactor, 2), max_data_report)))
iprint.df(round(my_summary(ProjectDataFactor), 2))
thecor = round(cor(ProjectDataFactor),2)
iprint.df(round(thecor,2), scale=TRUE)
# Here is how the `principal` function is used
UnRotated_Results<-principal(ProjectDataFactor, nfactors=ncol(ProjectDataFactor), rotate="none",score=TRUE)
UnRotated_Factors<-round(UnRotated_Results$loadings,2)
UnRotated_Factors<-as.data.frame(unclass(UnRotated_Factors))
colnames(UnRotated_Factors)<-paste("Comp",1:ncol(UnRotated_Factors),sep="")
# Here is how we use the `PCA` function
Variance_Explained_Table_results<-PCA(ProjectDataFactor, graph=FALSE)
Variance_Explained_Table<-Variance_Explained_Table_results$eig
Variance_Explained_Table_copy<-Variance_Explained_Table
rownames(Variance_Explained_Table) <- paste("Component", 1:nrow(Variance_Explained_Table), sep=" ")
colnames(Variance_Explained_Table) <- c("Eigenvalue", "Pct of explained variance", "Cumulative pct of explained variance")
iprint.df(round(Variance_Explained_Table, 2))
eigenvalues  <- Variance_Explained_Table[, "Eigenvalue"]
df           <- cbind(as.data.frame(eigenvalues), c(1:length(eigenvalues)), rep(1, length(eigenvalues)))
colnames(df) <- c("eigenvalues", "components", "abline")
iplot.df(melt(df, id="components"))
